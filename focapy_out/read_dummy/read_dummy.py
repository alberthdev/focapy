# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _read_dummy
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


new_intp = _read_dummy.new_intp
copy_intp = _read_dummy.copy_intp
delete_intp = _read_dummy.delete_intp
intp_assign = _read_dummy.intp_assign
intp_value = _read_dummy.intp_value
new_floatp = _read_dummy.new_floatp
copy_floatp = _read_dummy.copy_floatp
delete_floatp = _read_dummy.delete_floatp
floatp_assign = _read_dummy.floatp_assign
floatp_value = _read_dummy.floatp_value
new_doublep = _read_dummy.new_doublep
copy_doublep = _read_dummy.copy_doublep
delete_doublep = _read_dummy.delete_doublep
doublep_assign = _read_dummy.doublep_assign
doublep_value = _read_dummy.doublep_value
new_inta = _read_dummy.new_inta
delete_inta = _read_dummy.delete_inta
inta_getitem = _read_dummy.inta_getitem
inta_setitem = _read_dummy.inta_setitem
new_floata = _read_dummy.new_floata
delete_floata = _read_dummy.delete_floata
floata_getitem = _read_dummy.floata_getitem
floata_setitem = _read_dummy.floata_setitem
new_doublea = _read_dummy.new_doublea
delete_doublea = _read_dummy.delete_doublea
doublea_getitem = _read_dummy.doublea_getitem
doublea_setitem = _read_dummy.doublea_setitem
mk_floatpp = _read_dummy.mk_floatpp
class header_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, header_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, header_list, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header_title"] = _read_dummy.header_list_header_title_set
    __swig_getmethods__["header_title"] = _read_dummy.header_list_header_title_get
    if _newclass:header_title = _swig_property(_read_dummy.header_list_header_title_get, _read_dummy.header_list_header_title_set)
    __swig_setmethods__["ndata"] = _read_dummy.header_list_ndata_set
    __swig_getmethods__["ndata"] = _read_dummy.header_list_ndata_get
    if _newclass:ndata = _swig_property(_read_dummy.header_list_ndata_get, _read_dummy.header_list_ndata_set)
    __swig_setmethods__["nchan"] = _read_dummy.header_list_nchan_set
    __swig_getmethods__["nchan"] = _read_dummy.header_list_nchan_get
    if _newclass:nchan = _swig_property(_read_dummy.header_list_nchan_get, _read_dummy.header_list_nchan_set)
    __swig_setmethods__["dummy"] = _read_dummy.header_list_dummy_set
    __swig_getmethods__["dummy"] = _read_dummy.header_list_dummy_get
    if _newclass:dummy = _swig_property(_read_dummy.header_list_dummy_get, _read_dummy.header_list_dummy_set)
    def __init__(self, *args): 
        this = _read_dummy.new_header_list(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _read_dummy.delete_header_list
    __del__ = lambda self : None;
header_list_swigregister = _read_dummy.header_list_swigregister
header_list_swigregister(header_list)

class data_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, data_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, data_list, name)
    __repr__ = _swig_repr
    __swig_setmethods__["obs"] = _read_dummy.data_list_obs_set
    __swig_getmethods__["obs"] = _read_dummy.data_list_obs_get
    if _newclass:obs = _swig_property(_read_dummy.data_list_obs_get, _read_dummy.data_list_obs_set)
    __swig_setmethods__["error"] = _read_dummy.data_list_error_set
    __swig_getmethods__["error"] = _read_dummy.data_list_error_get
    if _newclass:error = _swig_property(_read_dummy.data_list_error_get, _read_dummy.data_list_error_set)
    def __init__(self, *args): 
        this = _read_dummy.new_data_list(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _read_dummy.delete_data_list
    __del__ = lambda self : None;
data_list_swigregister = _read_dummy.data_list_swigregister
data_list_swigregister(data_list)

class mean_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mean_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mean_type, name)
    __repr__ = _swig_repr
    __swig_setmethods__["total"] = _read_dummy.mean_type_total_set
    __swig_getmethods__["total"] = _read_dummy.mean_type_total_get
    if _newclass:total = _swig_property(_read_dummy.mean_type_total_get, _read_dummy.mean_type_total_set)
    __swig_setmethods__["n"] = _read_dummy.mean_type_n_set
    __swig_getmethods__["n"] = _read_dummy.mean_type_n_get
    if _newclass:n = _swig_property(_read_dummy.mean_type_n_get, _read_dummy.mean_type_n_set)
    def __init__(self, *args): 
        this = _read_dummy.new_mean_type(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _read_dummy.delete_mean_type
    __del__ = lambda self : None;
mean_type_swigregister = _read_dummy.mean_type_swigregister
mean_type_swigregister(mean_type)

class stddev_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stddev_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stddev_type, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _read_dummy.stddev_type_n_set
    __swig_getmethods__["n"] = _read_dummy.stddev_type_n_get
    if _newclass:n = _swig_property(_read_dummy.stddev_type_n_get, _read_dummy.stddev_type_n_set)
    __swig_setmethods__["delta"] = _read_dummy.stddev_type_delta_set
    __swig_getmethods__["delta"] = _read_dummy.stddev_type_delta_get
    if _newclass:delta = _swig_property(_read_dummy.stddev_type_delta_get, _read_dummy.stddev_type_delta_set)
    __swig_setmethods__["mean"] = _read_dummy.stddev_type_mean_set
    __swig_getmethods__["mean"] = _read_dummy.stddev_type_mean_get
    if _newclass:mean = _swig_property(_read_dummy.stddev_type_mean_get, _read_dummy.stddev_type_mean_set)
    __swig_setmethods__["M2"] = _read_dummy.stddev_type_M2_set
    __swig_getmethods__["M2"] = _read_dummy.stddev_type_M2_get
    if _newclass:M2 = _swig_property(_read_dummy.stddev_type_M2_get, _read_dummy.stddev_type_M2_set)
    def __init__(self, *args): 
        this = _read_dummy.new_stddev_type(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _read_dummy.delete_stddev_type
    __del__ = lambda self : None;
stddev_type_swigregister = _read_dummy.stddev_type_swigregister
stddev_type_swigregister(stddev_type)

init_dummy = _read_dummy.init_dummy
set_ndata = _read_dummy.set_ndata
test_init = _read_dummy.test_init
inc_mean = _read_dummy.inc_mean
get_header = _read_dummy.get_header
get_data = _read_dummy.get_data
ret_mean = _read_dummy.ret_mean
ret_mean_from_array = _read_dummy.ret_mean_from_array
print_array = _read_dummy.print_array
read_array = _read_dummy.read_array
write_array = _read_dummy.write_array


